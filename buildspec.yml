version: 0.2

phases:
  install:
    commands:
      - npm ci
  pre_build:
    commands:
      - npm run lint
      - mkdir artifact
      - echo Logging in to Amazon ECR
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${ECR_REPOSITORY_URI}
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "IMAGE_TAG:${IMAGE_TAG}"
  build:
    commands:
      - npm run build
      # 打包静态文件
      - echo "Upload Static Files..."
      - aws s3 sync build/client s3://$WEB_BUCKET/ --delete --acl bucket-owner-full-control
      # build lambda
      - echo "Build post-confirmation..."
      - aws s3 sync build/client s3://$WEB_BUCKET/ --delete --acl bucket-owner-full-control
      # Build Docker Image
      - echo "Building the Docker image..."
      - docker build -t ${ECR_REPOSITORY_URI}:latest .
      - docker tag ${ECR_REPOSITORY_URI}:latest ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
      - docker image ls
      - docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
      # cdk -> cloudformation
      - echo "CDK Synth..."
      - npx cdk synth LambdaStack-$ENV --require-approval never -c env=$ENV -c imageTag=$IMAGE_TAG > ${CODEBUILD_SRC_DIR}/artifact/${SYNTH_TEMPLETE}

artifacts:
  files:
    - ${SYNTH_TEMPLETE}
  base-directory: artifact
