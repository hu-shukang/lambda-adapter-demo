version: 0.2

phases:
  install:
    commands:
      - npm ci
  pre_build:
    commands:
      - npm run lint
      - mkdir artifact
      - echo Logging in to Amazon ECR
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${ECR_REPOSITORY_URI}
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "IMAGE_TAG:${IMAGE_TAG}"
  build:
    commands:
      - TIMESTAMP=$(date +%Y%m%d%H%M%S)
      - npm run build
      # 打包静态文件
      - echo "Upload Static Files..."
      - aws s3 sync build/client s3://$WEB_BUCKET/ --delete --acl bucket-owner-full-control
      # Build Lambda
      - echo "Build Lambda..."
      - npm run build:lambda
      # post-confirmation lambda
      - echo "sync post-confirmation..."
      - cd ${CODEBUILD_SRC_DIR}/lambda/dist/cognito-triggers/post-confirmation
      - zip -rq post-confirmation-${TIMESTAMP}.zip .
      - aws s3 sync post-confirmation-${TIMESTAMP}.zip s3://$ASSET_BUCKET/post-confirmation-${TIMESTAMP}.zip --acl bucket-owner-full-control
      # post-confirmation lambda
      - echo "sync pre-signup..."
      - cd ${CODEBUILD_SRC_DIR}/lambda/dist/cognito-triggers/pre-signup
      - zip -rq pre-signup-${TIMESTAMP}.zip .
      - aws s3 sync pre-signup-${TIMESTAMP}.zip s3://$ASSET_BUCKET/pre-signup-${TIMESTAMP}.zip --acl bucket-owner-full-control
      # layer
      - echo "sync common-layer..."
      - cd ${CODEBUILD_SRC_DIR}/lambda/common-layer/nodejs
      - npm ci --omit=dev
      - cd ${CODEBUILD_SRC_DIR}/lambda/common-layer
      - zip -rq common-layer.zip .
      - aws s3 sync common-layer.zip s3://$ASSET_BUCKET/common-layer-${TIMESTAMP}.zip --acl bucket-owner-full-control
      - cd ${CODEBUILD_SRC_DIR}
      # Build Docker Image
      - echo "Building the Docker image..."
      - docker build -t ${ECR_REPOSITORY_URI}:latest .
      - docker tag ${ECR_REPOSITORY_URI}:latest ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
      - docker image ls
      - docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
      # cdk -> cloudformation
      - echo "CDK Synth..."
      - npx cdk synth LambdaStack-$ENV --require-approval never -c env=$ENV -c timestamp=$TIMESTAMP -c imageTag=$IMAGE_TAG > ${CODEBUILD_SRC_DIR}/artifact/${SYNTH_TEMPLETE}

artifacts:
  files:
    - ${SYNTH_TEMPLETE}
  base-directory: artifact
